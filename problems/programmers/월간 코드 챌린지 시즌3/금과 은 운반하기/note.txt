파라메트릭 서치 문제
특정 시간 안에 필요한 양만큼의 금과 은을 운반할 수 있는가?라는 결정문제로 변환하여 시간을 기준으로 이분탐색


문제 1. 탐색 범위
최소: t의 최솟값이 1이므로 1
최대: 요구량 최대, 운반량 최소, 편도 시간 최대로 계산하면
    2 * 10^9번 왕복, 마지막 1번은 안 돌아와도 됨 => 10^5 * (2 * (2 * 10^9) - 1)
탐색 범위 축소를 위해 최대 범위를 다음과 같이 변경 (주어진 조건에서 정확한 최대 범위가 아니어도 upper bound이기만 하면 되므로)
2 * Math.max(...t) * (a+b)
- 1kg씩 운반하더라도 a+b - 1번 왕복 + 1번 편도하면 됨
- 가장 먼 1개 도시에서 전체 수요를 운반한다는 가정이므로 이보다 오래 걸릴 수는 없음

문제 1-1. 이분탐색
while(left <= rigiht)
    mid = Math.floor((left + right)/2)
    pos에서 실패 => left = mid + 1
    pos에서 성공 => right = mid - 1
return left

- mid 계산시 ceil하면 최대범위에서 무한루프되므로 floor
- left < right로 조건을 잡으면 최대 시간에서도 실패하는 케이스에서 오답


문제 2. 필요한 양을 시간 T 안에 운반할 수 있는가?
도시 i에서 시간 안에 운반 가능한 횟수: Math.round(T/(2*t[i]))회
=> 왕복중 마지막에 못 돌아오는 경우(x.5 ~ x.99999...회 왕복)도 목적지 도착(운반)은 x+1회 한 것이므로 round처리.
도시 자원이 한정된 것을 고려하면
W[i] = Math.min(g[i] + s[i], w[i] * Math.round(T/(2*t[i]))) = 도시 i에서 운반 가능한 최대량

문제 2-1. 이 양을 금, 은에 어떻게 배분할 것인가?
둘을 어느 비율로 운반하나 총량은 W[i].
- 금을 우선으로 운반 => Gmax[i] + Smin[i] = W[i]
- 은을 우선으로 운반 => Gmin[i] + Smax[i] = W[i]

1. Gmax[i]들의 합 Gmax보다 a가 크거나
2. Smax[i]들의 합 Smax보다 b가 크면 불가능
3. 그 사이 어딘가는?

(Gmax, Smin)과 (Gmin, Smax)양 극단 사이 어딘가에 (G?, S?)를 잡는다고 가정
금, 은 각각의 부족분, 초과분은 상호 전환될 수 있으므로 둘의 합으로 비교하면 됨
즉, a + b <= G? + S?이면 됨
그런데 G? + S? = Gmax + Smin = Gmin + Smax이므로
a + b <= Gmax + Smin = Gmin + Smax가 성립하면 가능

Gmin, Smin이 필요할까? => 어차피 a + b의 비교 대상은 옮길 수 있는 총량. W[i]들을 모두 더해서 계산 가능
=> Gmax: G, Smax: S, total만 구하자

a <= G, b <= S, a + b <= total