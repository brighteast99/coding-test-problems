처음에는 무엇을 저장하면서 풀어야 할지 감이 잘 오지 않았다.
일단 케이스를 따져 보기로 했다.
경우의 수가 아주 많은 것 같지만, 결국은 첫 번째 집을 털거나, 털지 않거나로 분류할 수 있지 않을까?

만약 집의 수가 6개라고 한다면
1. 0번 집을 턴다 → money[0] + 2번~4번에서 얻을 수 있는 최대치
  1-1. 2번 집을 턴다 → money[0] + money[2] + 4번~4번에서 얻을 수 있는 최대치
    1-1-1. 4번 집을 턴다 → money[0] + money[2] + money[4]
    1-1-2. 4번 집을 털지 않는다 → money[0] + money[2]
  1-2. 2번 집을 털지 않는다 → money[0] + 3번~4번에서 얻을 수 있는 최대치
    1-2-1. 3번 집을 턴다 → money[0] + money[3]
    1-2-2. 3번 집을 털지 않는다 → money[0] + 4번~4번에서 얻을 수 있는 최대치
      1-2-2-1. 4번 집을 턴다 → money[0] + money[4]
      1-1-2-2. 4번 집을 털지 않는다 → money[0]
2. 0번 집을 털지 않는다 → 1번~5번에서 얻을 수 있는 최대치
  2-1. 1번 집을 턴다 → money[1] + 3번~5번에서 얻을 수 있는 최대치
    2-1-1. 3번 집을 턴다 → money[1] + money[3] + 5번~5번에서 얻을 수 있는 최대치
      2-1-1-1. 5번 집을 턴다 → money[1] + money[3] + money[5]
      2-1-1-2. 5번 집을 털지 않는다 → money[1] + money[3]
    2-1-2. 3번 집을 털지 않는다 → money[1] + 4번~5번에서 얻을 수 있는 최대치
      2-1-2-1. 4번 집을 턴다 → money[1] + money[4]
      2-1-2-2. 4번 집을 털지 않는다 → money[1] + 5번~5번에서 얻을 수 있는 최대치
        2-1-2-1. 5번 집을 턴다 → money[1] + money[5]
        2-1-2-2. 5번 집을 털지 않는다 → money[1]
  2-2. 1번 집을 털지 않는다
    2-2-1. 2번 집을 턴다 → money[2] + 4번~5번에서 얻을 수 있는 최대치
    2-2-2. 2번 집을 털지 않는다 →  3번~5번에서 얻을 수 있는 최대치
넉넉히 적었지만 이쯤까지만 봐도 "i번~j번에서 얻을 수 있는 최대치" 중 겹치는 부분이 꽤 있음을 볼 수 있다. 집의 수가 많아지면 겹치는 부분이 더 커질 것이다.
이를 메모하며 dfs하면 될 것으로 보인다.

베이스 케이스는 다음 두 가지이다.
시작점이 끝점보다 커지면 0을 반환
시작점과 끝점이 같으면 해당 집이 가진 돈을 반환

n번 집까지가 존재할 때, 문제의 답은 (0번 집의 돈 + 2번~n-1번에서 얻을 수 있는 최대치)와 1번~n번에서 얻을 수 있는 최대치중 큰 쪽이 된다.